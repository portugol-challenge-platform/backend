import { AcessoMetodo, Agrupamento, Atribuir, Binario, Chamada, DefinirValor, FormatacaoEscrita, Literal, Logico, Variavel, Vetor } from '../construtos';
import { Bloco, Classe, Const, Declaracao, Escreva, Expressao, FuncaoDeclaracao, Leia, ParaCada, Retorna, Se, Tente, Var } from '../declaracoes';
import { SimboloInterface, TradutorInterface } from '../interfaces';
export declare class TradutorPython implements TradutorInterface<Declaracao> {
    indentacao: number;
    traduzirNomeVariavel(variavel: string): string;
    traduzirSimboloOperador(operador: SimboloInterface): string;
    logicaComumBlocoEscopo(declaracoes: Declaracao[]): string;
    traduzirDeclaracaoTente(declaracaoTente: Tente): string;
    traduzirConstrutoLogico(logico: Logico): string;
    traduzirConstrutoLiteral(literal: Literal): string;
    trazudirConstrutoAcessoMetodo(acessoMetodo: AcessoMetodo): string;
    traduzirDeclaracaoEscreva(declaracaoEscreva: Escreva): string;
    traduzirDeclaracaoEscrevaMesmaLinha(declaracaoEscreva: Escreva): string;
    traduzirConstrutoFormatacaoEscrita(formatacaoEscrita: FormatacaoEscrita): string;
    traduzirDeclaracaoLeia(declaracaoLeia: Leia): string;
    traduzirConstrutoBinario(binario: Binario): string;
    traduzirDeclaracaoFuncao(declaracaoFuncao: FuncaoDeclaracao): string;
    traduzirDeclaracaoSe(declaracaoSe: Se, iniciarComIf?: boolean): string;
    logicaTraducaoMetodoClasse(metodoClasse: FuncaoDeclaracao): string;
    traduzirDeclaracaoClasse(declaracaoClasse: Classe): string;
    traduzirConstrutoChamada(chamada: Chamada): string;
    traduzirDeclaracaoRetorna(declaracaoRetorna: Retorna): string;
    traduzirConstrutoVetor(vetor: Vetor): string;
    traduzirConstrutoDefinirValor(definirValor: DefinirValor): string;
    traduzirDeclaracaoVar(declaracaoVar: Var): string;
    traduzirDeclaracaoConst(declaracaoConst: Const): string;
    traduzirDeclaracaoParaCada(declaracaoParaCada: ParaCada): string;
    traduzirConstrutoAtribuir(atribuir: Atribuir): string;
    traduzirConstrutoVariavel(variavel: Variavel): string;
    traduzirDeclaracaoExpressao(declaracaoExpressao: Expressao): string;
    traduzirDeclaracaoBloco(declaracaoBloco: Bloco): string;
    traduzirConstrutoAgrupamento(agrupamento: Agrupamento): string;
    dicionarioConstrutos: {
        AcessoMetodo: any;
        Agrupamento: any;
        Atribuir: any;
        Binario: any;
        Chamada: any;
        DefinirValor: any;
        Literal: any;
        Logico: any;
        Variavel: any;
        Vetor: any;
        EscrevaMesmaLinha: any;
        FormatacaoEscrita: any;
    };
    dicionarioDeclaracoes: {
        Bloco: any;
        Classe: any;
        Const: any;
        Atribuir: any;
        Continua: () => string;
        Escreva: any;
        EscrevaMesmaLinha: any;
        Expressao: any;
        FuncaoDeclaracao: any;
        Leia: any;
        ParaCada: any;
        Retorna: any;
        Se: any;
        Sustar: () => string;
        Tente: any;
        Var: any;
    };
    traduzir(declaracoes: Declaracao[]): string;
}
